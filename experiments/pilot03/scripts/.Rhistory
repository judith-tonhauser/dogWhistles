tmp$priorBelief <- "low"
tmp[tmp$priorBelief == "high",]$prior > .5
table(tmp$priorBelief)
tmp= tmp %>%
mutate(priorBelief = ifelse(prior <= .5, "low", "high"))
table(tmp$priorBelief)
# group participants by their prior beliefs
tmp <- t
tmp= tmp %>%
mutate(priorBelief = ifelse(prior <= .5, "low", "high"))
table(tmp$priorBelief)
ggplot(tmp, aes(x=ai, y=projective,group = priorBelief)) +
geom_smooth(method="lm",colour="black",group = priorBelief) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective,group = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50")
ggplot(tmp, aes(x=ai, y=projective,group = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(t, aes(x=prior, y=projective)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Prior probability rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1)
ggplot(t, aes(x=ai, y=projective)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1)
ggplot(t, aes(x=ai, y=projective)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1)
ggplot(t, aes(x=prior, y=ai)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
xlab("Prior probability rating") +
ylab("Asking-whether rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1)
proj.means = t %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
ungroup() %>%
mutate(short_trigger = fct_reorder(as.factor(short_trigger),Mean))
proj.means
t = t %>%
mutate(short_trigger = fct_relevel(short_trigger,levels(proj.means$short_trigger)))
# group participants by their prior beliefs
tmp <- t
tmp= tmp %>%
mutate(priorBelief = ifelse(prior <= .5, "low", "high"))
table(tmp$priorBelief)
ggplot(tmp, aes(x=ai, y=projective,group = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, color = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm",colour=priorBelief) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
# load required packages
library(tidyverse)
library(ggrepel)
install.packages("ggrepel")
library(dichromat)
install.packages("dichromat")
# load required packages
library(tidyverse)
library(ggrepel)
library(dichromat)
library(forcats)
library(RColorBrewer)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
d = read_csv("../data/d.csv")
nrow(d) #13130 / 505 Turkers = 26 rows (20 target, 6 control), each with projection, nai, prior response
# target data
t = d %>%
filter(short_trigger != "MC") %>%
droplevels()
nrow(t) #10100 / 505 Turkers = 20 rows (one for each predicate, each with prior, proj, ai)
names(t)
table(t$short_trigger)
summary(t)
# group participants by their prior beliefs
tmp <- t
tmp= tmp %>%
mutate(priorBelief = ifelse(prior <= .5, "low", "high"))
table(tmp$priorBelief)
table(tmp$priorBelief,t$short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggsave(f="../graphs/certainty-by-nai-and-predicate-and-beliefs.pdf",height=5,width=5)
proj.means = t %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
ungroup() %>%
mutate(short_trigger = fct_reorder(as.factor(short_trigger),Mean))
proj.means
t = t %>%
mutate(short_trigger = fct_relevel(short_trigger,levels(proj.means$short_trigger)))
tmp= tmp %>%
mutate(priorBelief = ifelse(prior <= .5, "low", "high"))
# group participants by their prior beliefs
tmp <- t
tmp= tmp %>%
mutate(priorBelief = ifelse(prior <= .5, "low", "high"))
table(tmp$priorBelief)
table(tmp$priorBelief,t$short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm",colour="black") +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggsave(f="../graphs/certainty-by-nai-and-predicate-and-beliefs.pdf",height=5,width=5)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm", aes(group=Species)) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief)) +
geom_smooth(method="lm", aes(group=priorBelief)) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief, color = priorBelief)) +
geom_smooth(method="lm", aes(group=priorBelief)) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
#scale_color_manual(values=c("#56B4E9","#E69F00"),labels=c("lower probability","higher probability"),name="Fact") +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief, color = priorBelief)) +
geom_smooth(method="lm", aes(group=priorBelief)) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
scale_color_manual(values=c("#56B4E9","#E69F00")) +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggplot(tmp, aes(x=ai, y=projective, group = priorBelief, color = priorBelief)) +
geom_smooth(method="lm", aes(group=priorBelief)) +
geom_point(shape=20, size=1, alpha=.3,colour="grey50") +
scale_color_manual(values=c("#E69F00","#56B4E9")) +
xlab("Asking-whether rating") +
ylab("Certainty rating") +
theme(legend.position = "top", legend.text=element_text(size=12)) +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=3))) +
#xlim(0,1) +
#ylim(0,1) +
scale_x_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
scale_y_continuous(breaks=c(0,.5,1),labels=c("0",".5","1")) +
theme(panel.spacing.x = unit(4, "mm")) +
coord_fixed(ratio = 1) +
facet_wrap(. ~ short_trigger)
ggsave(f="../graphs/certainty-by-nai-and-predicate-and-beliefs.pdf",height=5,width=5)
ggsave(f="../graphs/certainty-by-nai-and-predicate-and-beliefs.pdf",height=6,width=6)
# load required packages
library(tidyverse)
library(ggrepel)
library(dichromat)
library(forcats)
library(RColorBrewer)
library(lmerTest)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
d = read_csv("../data/d.csv")
nrow(d) #13130 / 505 Turkers = 26 rows (20 target, 6 control), each with projection, nai, prior response
# target data
t = d %>%
filter(short_trigger != "MC") %>%
droplevels()
nrow(t) #10100 / 505 Turkers = 20 rows (one for each predicate, each with prior, proj, ai)
names(t)
table(t$short_trigger)
# mean at-issueness by predicate, with main clause controls
ai.means = cd %>%
group_by(short_trigger) %>%
summarize(Mean = mean(ai), CILow = ci.low(ai), CIHigh = ci.high(ai)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, verb = fct_reorder(as.factor(short_trigger),Mean))
# mean at-issueness by predicate, with main clause controls
ai.means = d %>%
group_by(short_trigger) %>%
summarize(Mean = mean(ai), CILow = ci.low(ai), CIHigh = ci.high(ai)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, verb = fct_reorder(as.factor(short_trigger),Mean))
proj.means
levels(proj.means$short_trigger)
levels(ai.means$short_trigger)
ai.means
# mean at-issueness by predicate, with main clause controls
summary(d)
ai.means = d %>%
group_by(short_trigger) %>%
summarize(Mean = mean(ai), CILow = ci.low(ai), CIHigh = ci.high(ai)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, verb = fct_reorder(as.factor(short_trigger),Mean))
ai.means
levels(ai.means$short_trigger)
summary(ai.means)
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, verb = fct_reorder(as.factor(as.character(short_trigger),Mean))
ai.means = d %>%
group_by(short_trigger) %>%
summarize(Mean = mean(ai), CILow = ci.low(ai), CIHigh = ci.high(ai)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, verb = fct_reorder(as.factor(as.character(short_trigger)),Mean))
ai.means
summary(ai.means)
levels(ai.means$verb)
# mean at-issueness by predicate, with main clause controls
summary(t)
ai.means = t %>%
group_by(short_trigger) %>%
summarize(Mean = mean(ai), CILow = ci.low(ai), CIHigh = ci.high(ai)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, verb = fct_reorder(as.factor(as.character(short_trigger)),Mean))
ai.means
summary(ai.means)
levels(ai.means$verb)
subjmeans$verb <- factor(subjmeans$short_trigger, levels = unique(levels(ai.means$verb)))
# to add participants' ratings
subjmeans = t %>%
group_by(workerid,short_trigger) %>%
summarize(Mean = mean(ai))
subjmeans$verb <- factor(subjmeans$short_trigger, levels = unique(levels(ai.means$verb)))
levels(subjmeans$verb)
subjmeans
ggplot(ai.means, aes(x=verb, y=Mean)) +
theme(legend.position = "top", legend.text=element_text(size=12)) +
geom_point(data=subjmeans,shape=21,alpha=.08) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25) +
geom_point(size = 3,color="black") +
#scale_shape_manual(values=rev(c(24, 25, 21)),labels=rev(c("higher probability","lower probability","main clause")),name="Fact") +
#scale_fill_manual(values=rev(c("#E69F00","#56B4E9","black")),labels=rev(c("higher probability","lower probability","main clause")),name="Fact") +
#scale_color_manual(values=rev(c("#E69F00","#56B4E9","black")),labels=rev(c("higher probability","lower probability","main clause")),name="Fact") +
scale_alpha(range = c(.3,1)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,.2,.4,.6,.8,1), labels=c("0", ".2", ".4", ".6", ".8", "1")) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
geom_errorbar(aes(x=1,ymin=mc.data$YMin,ymax=mc.data$YMax,width=.25),color="black",width=0) +  # set x to the position of MC
geom_point(shape=20,size=4,aes(x=1,y=mc.data$Mean),color="black",show.legend = FALSE ) +  # set x to the position of MC
ylab("Mean not-at-issueness rating") +
xlab("Predicate")
ggplot(ai.means, aes(x=verb, y=Mean)) +
#theme(legend.position = "top", legend.text=element_text(size=12)) +
geom_point(data=subjmeans,shape=21,alpha=.08) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25) +
geom_point(size = 3,color="black") +
#scale_shape_manual(values=rev(c(24, 25, 21)),labels=rev(c("higher probability","lower probability","main clause")),name="Fact") +
#scale_fill_manual(values=rev(c("#E69F00","#56B4E9","black")),labels=rev(c("higher probability","lower probability","main clause")),name="Fact") +
#scale_color_manual(values=rev(c("#E69F00","#56B4E9","black")),labels=rev(c("higher probability","lower probability","main clause")),name="Fact") +
scale_alpha(range = c(.3,1)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,.2,.4,.6,.8,1), labels=c("0", ".2", ".4", ".6", ".8", "1")) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
geom_errorbar(aes(x=1,ymin=mc.data$YMin,ymax=mc.data$YMax,width=.25),color="black",width=0) +  # set x to the position of MC
geom_point(shape=20,size=4,aes(x=1,y=mc.data$Mean),color="black",show.legend = FALSE ) +  # set x to the position of MC
ylab("Mean not-at-issueness rating") +
xlab("Predicate")
ggplot(ai.means, aes(x=verb, y=Mean)) +
geom_point(size = 3,color="black")
ai.means
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source("../../../scripts/general.R")
source("../../../scripts/helpers.R")
d1 = read.csv("../generated/data/d-preprocessed.csv")
nrow(d1) #120
length(unique(d1$subj)) #60
table(d1$subj)
# also load the data from the other pilot (pilot 02)
d2 = read.csv("../../Pilot02/generated/data/d-preprocessed.csv")
nrow(d2) #110
length(unique(d2$subj)) #55
table(d2$subj)
head(d1)
head(d2)
# bind the data
d = rbind(d1,d2)
head(d)
nrow(d) #230
length(unique(d$subj)) #115
names(d)
table(d$wom.asylum)
# define numeric values for each position (higher = more conservative)
d$wom.refugees.num <- ifelse(d$wom.refugees == "Ich stimme zu", 1,
ifelse(d$wom.refugees == "Neutral", 0, -1))
d$wom.headscarf.num <- ifelse(d$wom.headscarf == "Ich stimme nicht zu", 1,
ifelse(d$wom.headscarf == "Neutral", 0, -1))
d$wom.citizenship.num <- ifelse(d$wom.citizenship == "Ich stimme nicht zu", 1,
ifelse(d$wom.citizenship == "Neutral", 0, -1))
d$wom.islam.num <- ifelse(d$wom.islam == "Ich stimme nicht zu", 1,
ifelse(d$wom.islam == "Neutral", 0, -1))
d$wom.asylum.num <- ifelse(d$wom.asylum == "Ich stimme zu", 1,
ifelse(d$wom.asylum == "Neutral", 0, -1))
d$mean.wom.score = (d$wom.refugees.num + d$wom.headscarf.num + d$wom.citizenship.num + d$wom.islam.num + d$wom.asylum.num) / 5
# lowest possible: -1 (least conservative)
# highest possible: 1 (most conservative)
table(d$mean.wom.score)
# racism against anti-immigrant score ----
ggplot(d[d$sentence.label != "Volk",], aes(x=mean.wom.score, y=pracism)) +
geom_jitter() +
geom_smooth(method='lm') +
theme(legend.position="right") +
scale_y_discrete(limits=c("1","2", "3", "4", "5")) +
xlim(-1,1) +
#scale_x_discrete(limits=c("-1.0","0","1.0")) +
#theme(axis.ticks=element_blank(),panel.grid.major.x=element_blank(),
#      panel.grid.minor.x=element_blank(),plot.background=element_blank(),
#      axis.title.x=element_blank()) +
theme(strip.background =element_rect(fill="white")) +
theme(strip.text = element_text(colour = 'black'),strip.text.x = element_text(size = 12)) +
xlab("Mean anti-immigrant score \n (higher ratings = more anti-immigrant)") +
ylab("Racism ratings \n (higher ratings = more racist)") +
facet_grid(dog.whistle ~ sentence.label,scale="free")
ggsave("../generated/plots/racist.pdf",height=3,width=6)
